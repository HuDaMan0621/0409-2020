"""
Step 3
Similarly, rewrite the code for the goblin attacking the hero and extract it into a method (also call it attack) of the Goblin class. 
Replace the existing code with a call to the attack method. It should look like goblin.attack(hero).

Step 4
Refactor the while condition:

while goblin.health > 0 and hero.health > 0:
to

while goblin.is_alive() and hero.is_alive():
The health checks should be moved to within the is_alive methods of Hero and Goblin respectively.

Step 5
Take the code for printing the health status of the hero and move it into a method called print_status of Hero. 
Do the same for the goblin.

Step 6
Do you see a lot of duplicated or similar code between Hero and Goblin? What if you can share the duplicated code between them? 
You can by using inheritance! Create a new class called Character and make both Hero and Goblin inherit from it.

Step 7
The alive methods on Hero and Goblin should be identical. Move it into Character, and remove them from Hero and Goblin 
- now they can simply inherit it from Character.

Step 7: Bonus Challenge
The methods attack and print_status method in Hero and Goblin look almost identical, but not quite. 
Is it possible to move them into the Character class as well? Give it a try.

Step 8: Bonus Challenge 2
Create a zombie character that cannot die and have it fight the hero instead of the goblin.
